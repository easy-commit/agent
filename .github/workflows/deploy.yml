name: EasyCommit CI & Deploy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:  # ðŸ‘ˆ autorise l'exÃ©cution manuelle du workflow

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.tests.outcome == 'success' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking with mypy
        run: |
          echo -e "[mypy]\nignore_missing_imports = True" > mypy.ini
          pip install mypy types-requests types-psutil pandas-stubs
          mypy .

      - name: Test with pytest
        id: tests
        run: |
          pip install pytest
          pytest tests || echo "âœ… No tests defined yet."

      - name: Check server response (API health)
        run: |
          python server.py &
          sleep 5
          curl --fail http://localhost:5000/dashboard

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install OpenVPN + SSH tools
        run: |
          sudo apt-get update
          sudo apt-get install -y openvpn openssh-client

      - name: Connect to VPN
        env:
          VPN_USERNAME: ${{ secrets.VPN_USERNAME }}
          VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
        run: |
          echo "${{ secrets.VPN_CONFIG }}" | base64 --decode > vpn.conf
          sudo openvpn --config vpn.conf --daemon \
            --auth-user-pass <(echo -e "${VPN_USERNAME}\n${VPN_PASSWORD}")
          sleep 20

      - name: Deploy and run EasyCommit on remote server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST "
            cd $DEPLOY_PATH &&
            git pull origin main &&
            docker compose down &&
            docker compose up -d --build
          "
